/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { MockToken, MockTokenInterface } from "../../contracts/MockToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "__decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidShortString",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
    ],
    name: "StringTooLong",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "EIP712DomainChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      {
        internalType: "bytes1",
        name: "fields",
        type: "bytes1",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint256[]",
        name: "extensions",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101606040523480156200001257600080fd5b5060405162001d1e38038062001d1e833981016040819052620000359162000394565b8280604051806040016040528060018152602001603160f81b815250858581600390805190602001906200006b92919062000214565b5080516200008190600490602084019062000214565b5050506200009f6005836200017160201b620007781790919060201c565b61012052620000bc81600662000171602090811b6200077817901c565b61014052815160208084019190912060e052815190820120610100524660a0526200014a60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506009805460ff191660ff9290921691909117905550620004ad9050565b600060208351101562000191576200018983620001c5565b9050620001bf565b82620001a8836200021160201b620007af1760201c565b8151620001b9926020019062000214565b5060ff90505b92915050565b600080829050601f81511115620001fc578260405163305a27a960e01b8152600401620001f3919062000419565b60405180910390fd5b805162000209826200044e565b179392505050565b90565b828054620002229062000476565b90600052602060002090601f01602090048101928262000246576000855562000291565b82601f106200026157805160ff191683800117855562000291565b8280016001018555821562000291579182015b828111156200029157825182559160200191906001019062000274565b506200029f929150620002a3565b5090565b5b808211156200029f5760008155600101620002a4565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620002ed578181015183820152602001620002d3565b83811115620002fd576000848401525b50505050565b600082601f8301126200031557600080fd5b81516001600160401b0380821115620003325762000332620002ba565b604051601f8301601f19908116603f011681019082821181831017156200035d576200035d620002ba565b816040528381528660208588010111156200037757600080fd5b6200038a846020830160208901620002d0565b9695505050505050565b600080600060608486031215620003aa57600080fd5b83516001600160401b0380821115620003c257600080fd5b620003d08783880162000303565b94506020860151915080821115620003e757600080fd5b50620003f68682870162000303565b925050604084015160ff811681146200040e57600080fd5b809150509250925092565b60208152600082518060208401526200043a816040850160208701620002d0565b601f01601f19169190910160400192915050565b8051602080830151919081101562000470576000198160200360031b1b821691505b50919050565b600181811c908216806200048b57607f821691505b602082108114156200047057634e487b7160e01b600052602260045260246000fd5b60805160a05160c05160e05161010051610120516101405161181662000508600039600061044d0152600061042201526000610d9201526000610d6a01526000610cc501526000610cef01526000610d1901526118166000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637ecebe0011610097578063a457c2d711610066578063a457c2d714610221578063a9059cbb14610234578063d505accf14610247578063dd62ed3e1461025a57600080fd5b80637ecebe00146101d657806384b0196e146101e957806395d89b4114610204578063a0712d681461020c57600080fd5b8063313ce567116100d3578063313ce5671461016b5780633644e51514610185578063395093511461018d57806370a08231146101a057600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d6102a0565b60405161011a91906114a0565b60405180910390f35b6101366101313660046114e3565b610332565b604051901515815260200161011a565b6002545b60405190815260200161011a565b61013661016636600461150d565b61034c565b610173610370565b60405160ff909116815260200161011a565b61014a61038e565b61013661019b3660046114e3565b61039d565b61014a6101ae366004611549565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b61014a6101e4366004611549565b6103e9565b6101f1610414565b60405161011a9796959493929190611564565b61010d6104b9565b61021f61021a366004611623565b6104c8565b005b61013661022f3660046114e3565b6104d5565b6101366102423660046114e3565b6105ab565b61021f61025536600461163c565b6105b9565b61014a6102683660046116af565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6060600380546102af906116e2565b80601f01602080910402602001604051908101604052809291908181526020018280546102db906116e2565b80156103285780601f106102fd57610100808354040283529160200191610328565b820191906000526020600020905b81548152906001019060200180831161030b57829003601f168201915b5050505050905090565b6000336103408185856107b2565b60019150505b92915050565b60003361035a858285610965565b610365858585610a3c565b506001949350505050565b60095460009060ff1615610388575060095460ff1690565b50601290565b6000610398610cab565b905090565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919061034090829086906103e4908790611730565b6107b2565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260076020526040812054610346565b6000606080828080836104487f00000000000000000000000000000000000000000000000000000000000000006005610de3565b6104737f00000000000000000000000000000000000000000000000000000000000000006006610de3565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b6060600480546102af906116e2565b6104d23382610e87565b50565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091908381101561059e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61036582868684036107b2565b600033610340818585610a3c565b83421115610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610595565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886106528c610f7a565b60408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006106ba82610faf565b905060006106ca82878787610ff7565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610761576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610595565b61076c8a8a8a6107b2565b50505050505050505050565b60006020835110156107945761078d8361101f565b9050610346565b828281516107a5926020019061139c565b5060ff9050610346565b90565b73ffffffffffffffffffffffffffffffffffffffff8316610854576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610595565b73ffffffffffffffffffffffffffffffffffffffff82166108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610595565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a365781811015610a29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610595565b610a3684848484036107b2565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610adf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610595565b73ffffffffffffffffffffffffffffffffffffffff8216610b82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610595565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610c38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610595565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610a36565b60003073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015610d1157507f000000000000000000000000000000000000000000000000000000000000000046145b15610d3b57507f000000000000000000000000000000000000000000000000000000000000000090565b610398604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b606060ff8314610df65761078d83611076565b818054610e02906116e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2e906116e2565b8015610e7b5780601f10610e5057610100808354040283529160200191610e7b565b820191906000526020600020905b815481529060010190602001808311610e5e57829003601f168201915b50505050509050610346565b73ffffffffffffffffffffffffffffffffffffffff8216610f04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610595565b8060026000828254610f169190611730565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526007602052604090208054600181018255905b50919050565b6000610346610fbc610cab565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6000806000611008878787876110b5565b91509150611015816111a4565b5095945050505050565b600080829050601f8151111561106357826040517f305a27a900000000000000000000000000000000000000000000000000000000815260040161059591906114a0565b805161106e8261176f565b179392505050565b606060006110838361135b565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156110ec575060009050600361119b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611140573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166111945760006001925092505061119b565b9150600090505b94509492505050565b60008160048111156111b8576111b86117b1565b14156111c15750565b60018160048111156111d5576111d56117b1565b141561123d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610595565b6002816004811115611251576112516117b1565b14156112b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610595565b60038160048111156112cd576112cd6117b1565b14156104d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610595565b600060ff8216601f811115610346576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8280546113a8906116e2565b90600052602060002090601f0160209004810192826113ca5760008555611410565b82601f106113e357805160ff1916838001178555611410565b82800160010185558215611410579182015b828111156114105782518255916020019190600101906113f5565b5061141c929150611420565b5090565b5b8082111561141c5760008155600101611421565b6000815180845260005b8181101561145b5760208185018101518683018201520161143f565b8181111561146d576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006114b36020830184611435565b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146114de57600080fd5b919050565b600080604083850312156114f657600080fd5b6114ff836114ba565b946020939093013593505050565b60008060006060848603121561152257600080fd5b61152b846114ba565b9250611539602085016114ba565b9150604084013590509250925092565b60006020828403121561155b57600080fd5b6114b3826114ba565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e0818401526115a060e084018a611435565b83810360408501526115b2818a611435565b6060850189905273ffffffffffffffffffffffffffffffffffffffff8816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015611611578351835292840192918401916001016115f5565b50909c9b505050505050505050505050565b60006020828403121561163557600080fd5b5035919050565b600080600080600080600060e0888a03121561165757600080fd5b611660886114ba565b965061166e602089016114ba565b95506040880135945060608801359350608088013560ff8116811461169257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156116c257600080fd5b6116cb836114ba565b91506116d9602084016114ba565b90509250929050565b600181811c908216806116f657607f821691505b60208210811415610fa9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000821982111561176a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b80516020808301519190811015610fa9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60209190910360031b1b16919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220ef6947ce310257798b8fd155cb102aee1c762675aec9716c35cc360f5d4993c164736f6c634300080c0033";

type MockTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockToken__factory extends ContractFactory {
  constructor(...args: MockTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    __decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockToken> {
    return super.deploy(
      name,
      symbol,
      __decimals,
      overrides || {}
    ) as Promise<MockToken>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    __decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      __decimals,
      overrides || {}
    );
  }
  override attach(address: string): MockToken {
    return super.attach(address) as MockToken;
  }
  override connect(signer: Signer): MockToken__factory {
    return super.connect(signer) as MockToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenInterface {
    return new utils.Interface(_abi) as MockTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockToken {
    return new Contract(address, _abi, signerOrProvider) as MockToken;
  }
}
